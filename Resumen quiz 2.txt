
------------------- ACID -----------------------------------------------------

* Es lo básico que debe tener una DB relaional para poder ser consistente
	- Atomicity: Transacciones completas, (todo o nada)
	- Consistency:Veracidad de los datos, datos válidos deacuerdo a las 
	  reglas definidas (fechas, montos de dinero....)
	- Isolation: Independencia de las transacciones, una transacción no debe 
	   afectar la otra.
	- Durability: Durabilidad o preservación de los datos durante mucho tiempo,
	  historial de los datos.

------------------ NOMING CONVENTIONS --------------------------------------

	- Eliminar las comillas, en minúsulas y más de dos palabras separadas por un guión bajo
	- Evitar las palabras reservadas, sin abrebiaciones, los tipos de datos no son nombre
	- Las tablas y vistas en plural, PK (id), FK 

------------------ DEPENDENCIA FUNCIONAL -----------------------------------

* Es cuando un campo clave determina a otro campo no clave:
	- A->B: A determina a B ó B es funcionalmente dependiente de A
	- A,B->c: A y B determinan a C ó C es funcionalmente dependiente de A y B
	- DEPENDENCIA PARCIAL: Sólo aplica cuando la clave es compuesta(dos atributos como PK),
	  es cuando parte de la clave determina un campo no clave
	- DEPENDENCIA TRANCITIVA: Es cuando un campo no clave determina a otro campo no clave

------------------ NORMALIZACIÓN --------------------------------------------

* Es la aplicación de un conjunto de reglas o normas a cada una de las entidades de una
  DB con el objetivo de minimizar la redundancia de datos, facilitando así la posterior 
  gestión y utilización de una DB. 
	a) Ayuda a eliminar las anomalias de inserción, actualización y eliminación en una DB
	b) Reduce el espacio necesario para describir sus datos
	c) Entre más se normalice, aumenta el uso de inner joins y proteje la integridad de 
	   los datos
	d) La desnormalización se utiliza para crear sistemas altamente escalables

	- 1NF: + Requiere que los datos sean atómicos, prohibe que un campo tenga más de un dato
                 de su dominio de columna, no datos diferentes en un campo separados por comas y giones.
	       + Exige que todas las entidades o tablas deben tener una PK.
	       + Indica que una tabla no debe tener atributos que acepten valores nulos  
	- 2NF: + Ya debe de estar en la 1FN
	       + Se debe ELIMINAR LA DEPENDENCIA PARCIAL (segun las claves PK, se dividen en dos o
		 más tablas para que cada atributo no primo o no clave dependa sólamente de su campo clave
		 y no olvidar la clave foránea).
	       + Los campos claves van señalados ó sub rayados
	- 3NF: + Debe de estar en la 1FN Y 2FN
	       + Ningun campo o atributo no clave debe depender de otro no clave (ELIMINAR DEPENDENCIA 
                 TRANCITIVA).
	- BOYCE-CODD NF: + Es la 3.5 NF, toda tabla que esta en la 3.5NF ya esta en la 3NF, pero nó
                           necesariamente la que esté en 3NF ya cumpla con la (BCNF), 
        - 4NF:  + Debe de estar en la 3NF 
	        + Varias relaciones de muchos a muchos pero no unidas entre si
		+ Un registro no debe de tener dos o más valores múltiples independientes sobre una entidad
		+ Eliminar dependencias de valores múltiples (un elemento depende de más de un valor)
	- 5NF:  + Debe de estar en la 4NF
		+ Remover las dependencias de joins, varias relaciones de muchos a muchos unidos.
	        + Sun contenido de información no debe reconstruirce apartir de varios tipos de registros 
		  más pequeños
 
* NOTA: Se puede saltar la 2NF dependiendo de cómo se seleccionen las claves (en algunos casos en la 3NF 
        se llega a la 2NF)

------------------- TABLESPACES ---------------------------------------------------

* Es una estructura lógica primaria de almacenamiento de una base de datos para almacenar los 
  ficheros (datafiles). Cada tablespace debe de tener 1 o varios Datafiles donde se almacena  
  toda la información y los datafiles deben de tener una estructura lógica
	 
	- Tablespaces -> Lógicos NO SE PUEDE CREAR UN TABLESPACE SIN UN DATAFILE
	- CUANDO SE CREA UN USUARIO SE LE DEBE INDICAR A QUE TABLESPACE SE VA A ALMACENAR, 
          SI NO SE GUARDA POR DEFECTO EN USERS.
	- El tablespace es el que contiene la información necesaria de los usuarios (SYS y SYSTEM) que son 
	  los usuarios que tienen la información necesaria para que funcione la DB.
        - Cuando se crea una DB se debe de crear almenos un tablespace, que por defecto es SYSTEM
	- Se recomienda almenos crear otro tablespace para almacenar el resto de usuarios que vayamos creando
	  en nuestra DB.
	- Cuando se crea un tablespace se debe al menos indicar un datafile
	- Sí elimino sólo el Tablespace su datafile queda, no se borra

	- Datafiles -> Físicos: RUTA FÍSICA DEL DISCO DURO, QUE TANTO TAMAÑO TIENE FÍSICA/ LA DB, LOS OBJETOS 
				SE CREAN DENTRO DE LOS DATAFILES.
	  fichero físico al que se le asigna un directorio (ruta), un nombre y un 
	  tamaño inicial al que posteriormente podremos modificar (segun las necesidades y las restricciones 
	  de la instalación.
	- NOTA: + El tamaño de un TABLESPACE es el tamaño de los DATAFILES.
		+ El tamaño de la base de datos es el tamaño colectivo de los TABLESPACE

* Tipos de tablespaces:
	- Bigfile: Los bloques estan alterados para almacenar más información, (SÓLO PUEDE TENER 1 datafile)
	- System: Es donde se encuantra toda la información de Oracle para poder funcionar (pribiligios), 
	          siempre va a estar corriendo, se crea automáticamente cuando se instala el Oracle.
	- Sysaux: Auxiliar de System, se crea y se actualiza cuando se crea y actualiza la DB, 
		  nó extraible ni desechable.
	- UNDO: Almacena la información eliminada, (reversión, recuperación de transacciones de las DB, 
		recuperación de los daños lógicos). Nó es posible crear tablas ó índices, cambio de operaciones
	        DNL en transacciones,a cada instancia de oracle se le asigna sólo un espacio de tabla para deshacer.
	- Read-only tablespace: Elimina la necesidad de realizar copias de seguridad y recuperación, 
		                porciones grandes y estáticas de una DB, no se puede modificar, si recupera 
				una base de datos no es necesario tablespaces de sólo lectura.
	- Tempory: Los datos persisten sólo durante la sesión, mejora la concurrencia de operaciones múltiples,
		   evita las operaciones de gestión de espacios, las ganancias de rendimiento son significativos
		   con real aplicación CLÚSTERS. 

* Comandos tablespace y datafile:
	- select *from dba_tablespaces; (listar ó mostrar todos los Tablespaces)
        - select *from dba_data_files;  (listar ó mostar todos los Datafiles)
	- SELECT *FROM user_users;      (Usuario SYSTEM) 
	- create tablespace TEST datafile '/users/oradata/orcl/test01.dbf' size 100M; (Crear un tablespace TEST, 
	  de 100MB, en el directorio /users/oradata/orcl:)
	- Alter tablespace nombre_tablespace add datafile '/users/oracle/orcl/nombre_datafile2.dbf' size 100M; 
	 (añadiendo un datafile a un Tablespace existente)
	- alter datafile '/users/oradata/orcl/test01.dbf' resize 150M; (aumentar tamaño del datafile existente)
	- drop tablespace TEST; (borrar sólo el tablespace)
	- drop tablespace nombre del tablespace including contents and datafiles; (elimina el tablespace con sus datafiles)
	- ALTER DATABASE DATAFILES nombre_datafile AUTOEXTEND ON NEXT 20M MAXSIZE 1000M; (aumenta el tamaño de la base de 
	  datos aumentando dinámicamente sus datafiles en sus Tablespace existentes, aumenta de 20 en 20 hasta max 1000)

------------------ ADMINISTRACIÓN DE USUARIOS Y PRIBILEGIOS ------------------------------------------

* CONCEPTOS:
	*- Usuario: Objeto que se puede conectar a la DB, se crea por medio de un usuario y contraseña y se define a que 
	           tablespace está asociado.
	- Rol: Es un grupo de privilegios que se le asignan a un usuario o grupo de usuarios que realizan la misma función
	       o a otros roles.
	- Privilegios: Es el permiso ó permisos que se le dan a un usuario para que interactue con la DB, (crear, sólo lectura,
                       modificar,etc...)
	- NOTA: El que crea un obj automáticamente tiene los privilegios para admin ése obj, o el usuario SYSTEM, o otro usuario
		con los privilegios asignados, si un user quiere ver o admin ése obj, se le deben dar los privilegios.
	*- Perfiles: Es el límite de recursos que un user puede tener en una DB-
	   - Recursos: Cómo se comporta el user durante la sesión en el sistema, (tiempo de conexión, # de equivocaciones del password, 
		       tiempo para cambiar password, # CPU que puede utilizar el user).
	- NOTA: Un user puede nó tener un perfil o máximo 1 perfil (0-1), dentro de un perfil debe de tener mínimo un recurso configurado
                ó muchos recursos (1-N).

* COMANDOS:
	- Privilegios: GRANT -> Garantizar
		       REVOKE -> Quitar

	- Rol: (CREATE,ALTER,DROP,SET) ROLE
	       (GRANT,REVOKE) TO-name_OF_oracle

	- Usuario: (CREATE,ALTER,DROP) USER
		   (GRANT,REVOKE) TO_NAME_OF_USER

	- Perfil: (CREATE,ALTER,DROP) USER
		  ALTER USER.....PROFILE
		  CREATE USER.....PROFILE		





	


	
	   
        
	

	  